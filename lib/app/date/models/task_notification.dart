import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:get/get.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:intl/intl.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:taskorganizer/generated/locales.g.dart';

part 'task_notification.g.dart';

/// Represents a notification related to a task in the task organizer system.
@JsonSerializable()
class TaskNotification {
  /// Unique identifier of the notification, generated by Firestore.
  String? id;

  /// Identifier of the user to whom the notification belongs.
  String userId;

  /// Identifier of the task associated with this notification.
  String taskId;

  /// Description of the notification, providing additional information.
  String description;

  /// Indicates whether the notification has been shown to the user.
  bool isShown;

  /// The time when the notification should be delivered.
  /// This field is stored in Firestore as a Timestamp.
  @JsonKey(fromJson: _fromTimestamp, toJson: _toTimestamp)
  DateTime timeReceipt;

  /// Constructs a new TaskNotification instance.
  TaskNotification({
    this.id,
    required this.userId,
    required this.taskId,
    required this.description,
    required this.isShown,
    required this.timeReceipt,
  });

  /// Creates a TaskNotification object from a JSON map.
  /// This method is automatically generated by the `json_serializable` package.
  factory TaskNotification.fromJson(Map<String, dynamic> json) =>
      _$TaskNotificationFromJson(json);

  /// Converts a TaskNotification object to a JSON map.
  /// This method is automatically generated by the `json_serializable` package.
  Map<String, dynamic> toJson() => _$TaskNotificationToJson(this);

  /// Converts a Firestore Timestamp to a Dart DateTime object.
  static DateTime _fromTimestamp(dynamic timestamp) =>
      (timestamp as Timestamp).toDate();

  /// Converts a Dart DateTime object to a Firestore Timestamp.
  static dynamic _toTimestamp(DateTime dateTime) =>
      Timestamp.fromDate(dateTime);

  /// Generates a localized description for the notification.
  /// Returns a localized string describing the notification.
  static setNotificationDescription(String taskName, DateTime deadline) {
    String locale = Get.deviceLocale.toString();
    initializeDateFormatting(locale);

    /// Formats the deadline date and time in the user's locale.
    String deadlineTime =
    DateFormat('dd MMMM yyyy, HH:mm', locale).format(deadline);

    /// Returns a descriptive string for the notification using localized keys.
    return '${LocaleKeys.taskNotificationText1.tr} "$taskName" '
        '${LocaleKeys.taskNotificationText2.tr} $deadlineTime. '
        '${LocaleKeys.taskNotificationText3.tr}';
  }
}
